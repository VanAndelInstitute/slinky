% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slinky_clue.R
\docType{methods}
\name{clue}
\alias{clue}
\alias{clue,Slinky-method}
\title{clue}
\usage{
clue(x, endpoint = c("sigs", "cells", "genes", "perts", "plates",
  "profiles", "rep_drugs", "rep_drug_indications", "pcls"), fields = "",
  where_clause = NULL, ids = NULL, limit = 0, count = FALSE,
  unpack_sigs = TRUE, poscon = c("omit", "keep"), cl = NULL,
  verbose = FALSE)

\S4method{clue}{Slinky}(x, endpoint = c("sigs", "cells", "genes",
  "perts", "plates", "profiles", "rep_drugs", "rep_drug_indications",
  "pcls"), fields = "", where_clause = NULL, ids = NULL, limit = 0,
  count = FALSE, unpack_sigs = TRUE, poscon = c("omit", "keep"),
  cl = NULL, verbose = FALSE)
}
\arguments{
\item{x}{a Slinky Object}

\item{endpoint}{The endpoint to query.  Default is 'sigs'.}

\item{fields}{Optional vector of fields to return.}

\item{where_clause}{Optional where_clause clause.  Must be
named list (e.g. list(field='value')}

\item{ids}{Optional vector of ids to fetch for sigs or profiles
endpoints.  Should not be used together with where_clause or
count.}

\item{limit}{Optional limit to number of instances (samples to return}

\item{count}{Should we just return the count of intances satisfying 
the query rather than the data? Default is FALSE.}

\item{unpack_sigs}{The sigs endpoint returns multiple
distil_ids per row.  Should we unpack these to one per row?}

\item{poscon}{Instances of type \code{trt_poscon} are recoded
as \code{trt_cp} in clue.io's \code{sigs} endpoint.
This can lead to unexpected results downstream.  To keep these
instances, specify \code{poscon='keep'}}

\item{cl}{Optional cluster object to parallelize this
operation. If verbose is TRUE, use this pattern in order for
progress bar to update:
\code{cl <- parallel::makeCluster(4, outfile=\"\")}}

\item{verbose}{Do you want to know how things are going?
Default is false.}
}
\value{
Data returned by Slinky.api as a data.frame
}
\description{
Wrapper for clue.io REST calls
}
\examples{
# for build/demo only.  You MUST use your own key when using the slinky
# package.
user_key <- httr::content(httr::GET('https://api.clue.io/temp_api_key'),
                          as='parsed')$user_key
sl <- Slinky(user_key,
                 system.file('extdata', 'demo.gctx',
                      package='slinky'),
                 system.file('extdata', 'demo_inst_info.txt',
                     package = 'slinky'))
amox <- clue(sl, where_clause = list("pert_iname" = "amoxicillin", 
                                    "cell_id" = "MCF7",
                                    "is_gold" = TRUE))
}
